{"version":3,"sources":["api/ipify.js","images/icon-arrow.svg","components/Form/Form.js","components/Header/Header.js","components/Map/Map.js","components/Information/Information.js","components/Attribution/Attribution.js","components/App.js","index.js"],"names":["API_KEY","getIpAddress","a","ip_address","axios","get","params","apiKey","ipAddress","data","alert","console","response","Form","setGeolocation","useState","input_ip_address","setInputIpAddress","old_input_ip_address","setOldInputIpAddress","prevent_click","setPreventClick","useEffect","setGeolocationInfo","handleFormSubmit","e","preventDefault","isIpAddressValid","as","result","ip","location","isp","city","region","postalCode","timezone","lat","lng","LOCATION","TIME_ZONE","time_zone","name","latitude","longitude","test","className","method","onSubmit","htmlFor","id","placeholder","type","value","onChange","target","src","Arrow","alt","Header","Map","geolocation","ACCESS_TOKEN","ID","my_map","setMyMap","Leaflet","map","TIMEOUT_ID","setTimeout","setView","tileLayer","attribution","maxZoom","tileSize","zoomOffset","accessToken","addTo","marker","clearTimeout","Information","INFORMATION_DETAILS","information_details_el","Object","keys","key","Attribution","href","rel","App","Fragment","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.dad41957.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst API_KEY = 'at_pgu5AlssTyRLb9VKh8OJqjiSOdwey';\r\n\r\n/**\r\n * Get Ip Address Info on Ipify Server.\r\n * @param {*} ip_address\r\n * @return mixed (bool || obj)\r\n */\r\nconst getIpAddress = async function (ip_address = '') {\r\n    try {\r\n        const { data } = await axios.get('https://geo.ipify.org/api/v1', {\r\n            params: {\r\n                apiKey: API_KEY,\r\n                ipAddress: ip_address\r\n            },\r\n        });\r\n        return data;\r\n    } catch (error) {\r\n        alert(\"Oops! Something went wrong.\");\r\n        console.alert(error.response);\r\n        return false;\r\n    }\r\n};\r\n\r\nexport { getIpAddress };\r\n","export default __webpack_public_path__ + \"static/media/icon-arrow.2eaaa5ee.svg\";","import React, { useState, useEffect }from 'react';\r\nimport { getIpAddress } from '../../api/ipify';\r\n\r\nimport Arrow from '../../images/icon-arrow.svg';\r\nimport './Form.scss';\r\n\r\nconst Form = ({setGeolocation}) => {\r\n    \r\n    const [input_ip_address, setInputIpAddress] = useState('');\r\n\r\n    const [old_input_ip_address, setOldInputIpAddress] = useState('');\r\n\r\n    const [prevent_click, setPreventClick] = useState(false);\r\n\r\n    useEffect(() => {\r\n        (async function() {\r\n            setInputIpAddress(await setGeolocationInfo());\r\n        })();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const handleFormSubmit = async e => {\r\n        e.preventDefault();\r\n        if(isIpAddressValid() && old_input_ip_address !== input_ip_address && prevent_click === false) { \r\n            setPreventClick(true);\r\n            await setGeolocationInfo(input_ip_address);\r\n            setOldInputIpAddress(input_ip_address);\r\n            setPreventClick(false);\r\n        }\r\n    };\r\n\r\n    const setGeolocationInfo = async (ip_address = '') => {\r\n        const result = await getIpAddress(ip_address);\r\n        if (result === false) {\r\n            return;\r\n        }\r\n        const {as, ip, location, isp} = result;\r\n        const {city, region, postalCode, timezone, lat, lng} = location;\r\n        const LOCATION = `${city}, ${region} ${postalCode}`;\r\n        const TIME_ZONE = `UTC ${timezone}`;\r\n        setGeolocation({\r\n            ip_address: ip,\r\n            location: LOCATION,\r\n            time_zone: TIME_ZONE,\r\n            isp: !as ? isp : as.name,\r\n            latitude: lat,\r\n            longitude: lng\r\n        });\r\n        return ip;\r\n    };\r\n\r\n    function isIpAddressValid() {\r\n        const IP_ADDRESS_REGEX = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\r\n        if (IP_ADDRESS_REGEX.test(input_ip_address)) {\r\n            return true;\r\n        }\r\n        alert('Invalid IP Address');\r\n        return false;\r\n    };\r\n\r\n    return (\r\n        <form className=\"form\" method=\"POST\" onSubmit={handleFormSubmit}>\r\n            <div className=\"form__group\">\r\n                <label htmlFor=\"ip_address\">IP Address</label>\r\n                <input\r\n                    id=\"ip_address\"\r\n                    name=\"ip_address\"\r\n                    placeholder=\"Search for any IP address or domain\"\r\n                    type=\"text\"\r\n                    value={input_ip_address}\r\n                    onChange={e => setInputIpAddress(e.target.value)}\r\n                ></input>\r\n                <button type=\"submit\">\r\n                    <img src={Arrow} alt=\"arrow icon\"></img>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport Form from '../Form/Form';\r\nimport './Header.scss';\r\n\r\nconst Header = ({setGeolocation}) => {\r\n    return (\r\n        <header className=\"banner\">\r\n            <h1 className=\"heading--1\">IP Address Tracker</h1>\r\n            <Form setGeolocation={setGeolocation}/>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Leaflet from 'leaflet';\r\nimport './Map.scss';\r\n\r\nconst Map = ({geolocation}) => {\r\n\r\n    const {latitude, longitude} = geolocation;\r\n    const ACCESS_TOKEN = 'pk.eyJ1Ijoic3RlcGhlbm1pZ3VlbGR1ZW5hcyIsImEiOiJja2p2OG5yNTkxemZnMnpwNWV0cThrM2o3In0.yszjkHaWr_Wau66qSXrniQ';\r\n    const ATTRIBUTION = 'Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>';\r\n    const ID = 'mapbox/streets-v11';\r\n    const [my_map, setMyMap] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setMyMap(Leaflet.map('mapid'));\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n        const MILLISECONDS = 500;\r\n        const TIMEOUT_ID = setTimeout(() => {\r\n            if (my_map === null) {\r\n                return;\r\n            }\r\n            my_map.setView([latitude, longitude], 13);\r\n            Leaflet.tileLayer(\r\n                `https://api.mapbox.com/styles/v1/${ID}/tiles/{z}/{x}/{y}?access_token=${ACCESS_TOKEN}`,\r\n                {\r\n                    attribution: ATTRIBUTION,\r\n                    maxZoom: 18,\r\n                    id: ID,\r\n                    tileSize: 512,\r\n                    zoomOffset: -1,\r\n                    accessToken: ACCESS_TOKEN\r\n                }\r\n            ).addTo(my_map);\r\n            Leaflet.marker([latitude, longitude]).addTo(my_map);\r\n        }, MILLISECONDS);\r\n\r\n        return () => {\r\n            clearTimeout(TIMEOUT_ID)\r\n        };\r\n\r\n    }, [latitude, longitude, my_map]);\r\n    \r\n    return (<div id=\"mapid\"></div>);\r\n};\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport './Information.scss';\r\n\r\nconst Information = ({geolocation}) => {\r\n\r\n    const {ip_address, location, time_zone, isp} = geolocation;\r\n\r\n    const INFORMATION_DETAILS = {\r\n        'Ip Address': ip_address,\r\n        'Location': location,\r\n        'Timezone': time_zone,\r\n        'Isp': isp\r\n    };\r\n\r\n    const information_details_el = Object.keys(INFORMATION_DETAILS).map((key) => {\r\n        return (\r\n            <div className=\"information__detail\" key={key}>\r\n                <h2 className=\"information__detail__title\">{key}</h2>\r\n                <p className=\"information__detail__description\">{INFORMATION_DETAILS[key]}</p>\r\n            </div>\r\n        );\r\n    });\r\n       \r\n    return (\r\n        <div className=\"information\">\r\n            {information_details_el}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Information;\r\n","import React from 'react';\r\nimport './Attribution.scss';\r\n\r\nconst Attribution = () => {\r\n    const NAME = 'Stephen DueÃ±as';\r\n    return (\r\n        <div className=\"attribution\">\r\n            Challenge by <a href=\"//www.frontendmentor.io?ref=challenge\" target=\"_blank\" rel=\"noreferrer\">Frontend Mentor</a>. \r\n            Coded by <a href=\"//github.com/stephenduenas\" target=\"_blank\" rel=\"noreferrer\">{ NAME }</a>.\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Attribution;\r\n","import React, { useState } from 'react';\r\nimport Header from './Header/Header';\r\nimport Map from './Map/Map';\r\nimport Information from './Information/Information';\r\nimport Attribution from './Attribution/Attribution';\r\n\r\nconst App = () => {\r\n\r\n    const [geolocation, setGeolocation] = useState({\r\n        ip_address: '',\r\n        location: '',\r\n        time_zone: '',\r\n        isp: '',\r\n        latitude: 0,\r\n        longitude: 0,\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header setGeolocation={setGeolocation}/>\r\n            <Information geolocation={geolocation}/>\r\n            <Map geolocation={geolocation}/>\r\n            <Attribution/>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './sass/main.scss';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App/>, document.querySelector('#root'));"],"sourceRoot":""}